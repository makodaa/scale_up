{
import "package:scale_up/data/repositories/"
    "lessons/expression.lessons_repository.dart";
}

rule: Expression = ^ :expr $ { expr };

expr: Expression =
  | :expr _ "+" _ :term { AdditionExpression(expr, term) }
  | :expr _ "-" _ :term { SubtractionExpression(expr, term) }
  | term;

term: Expression =
  | "-" _ :term            { NegationExpression(term) }
  | :term _ :factor        { MultiplicationExpression(term, factor) }
  | :term _ "*" _ :factor  { MultiplicationExpression(term, factor) }
  | :term _ "/" _ :factor  { DivisionExpression(term, factor) }
  | factor;

factor: Expression =
  | :primary _ "^" _ :factor { PowerExpression(primary, factor) }
  | primary;

primary: Expression =
  | "(" _ :expr _ ")" { expr }
  | number;

@fragment
number: Expression =
  | \d+ "." \d+ {
      ConstantExpression(double.parse(buffer.substring(from, to)))
    }
  | \d+ {
      ConstantExpression(int.parse(buffer.substring(from, to)))
    }
  | [A-Za-z$_] [A-Za-z0-9$_]* {
      VariableExpression(buffer.substring(from, to))
    }
  ;

_ = \s* { () };